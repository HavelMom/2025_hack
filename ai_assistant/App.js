import React, { useState, useEffect, useRef } from 'react';
import { StatusBar } from 'expo-status-bar';
import { 
  StyleSheet, 
  Text, 
  View, 
  TouchableOpacity, 
  ScrollView, 
  SafeAreaView,
  ActivityIndicator,
  Alert
} from 'react-native';
import LiveKitVoiceInterface from './LiveKitVoiceInterface';
import HealthcareAgent from './HealthcareAgent';

export default function App() {
  // State variables
  const [connected, setConnected] = useState(false);
  const [recording, setRecording] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [response, setResponse] = useState('');
  const [connectionState, setConnectionState] = useState('disconnected');
  const [diagnosis, setDiagnosis] = useState(null);
  const [appointmentRequested, setAppointmentRequested] = useState(false);
  
  // References
  const voiceInterfaceRef = useRef(null);
  const healthcareAgentRef = useRef(null);
  
  // Initialize healthcare agent
  useEffect(() => {
    healthcareAgentRef.current = HealthcareAgent({
      transcript,
      onResponseGenerated: handleResponseGenerated,
      onDiagnosisGenerated: handleDiagnosisGenerated,
      onAppointmentRequested: handleAppointmentRequested
    });
  }, [transcript]);
  
  // LiveKit connection details (would come from your backend in production)
  const liveKitUrl = 'wss://example.livekit.cloud';
  const liveKitToken = 'your_token_here'; // This would be generated by your server
  
  // Connect to LiveKit
  const connectToLiveKit = () => {
    try {
      voiceInterfaceRef.current = LiveKitVoiceInterface({
        url: liveKitUrl,
        token: liveKitToken,
        onTranscriptReceived: handleTranscriptReceived,
        onResponseReceived: handleResponseReceived,
        onConnectionStateChange: handleConnectionStateChange,
        isListening: recording
      });
      
      setResponse('Connecting to healthcare voice assistant...');
    } catch (error) {
      Alert.alert('Connection Error', 'Failed to initialize voice interface: ' + error.message);
    }
  };

  // Handle connection state changes
  const handleConnectionStateChange = (state) => {
    setConnectionState(state);
    if (state === 'connected') {
      setConnected(true);
      setResponse('Connected to healthcare voice assistant. Press and hold the microphone button to describe your symptoms.');
    } else if (state === 'disconnected') {
      setConnected(false);
      setResponse('Disconnected from healthcare voice assistant.');
    } else if (state === 'error') {
      setConnected(false);
      setResponse('Error connecting to healthcare voice assistant. Please try again.');
    }
  };

  // Handle transcript received from voice interface
  const handleTranscriptReceived = (text) => {
    setTranscript(text);
  };

  // Handle response received from voice interface
  const handleResponseReceived = (text) => {
    setResponse(text);
  };

  // Handle response generated by healthcare agent
  const handleResponseGenerated = (text) => {
    setResponse(text);
    // In a real implementation, this would send the response back to LiveKit
    // for text-to-speech conversion
  };

  // Handle diagnosis generated by healthcare agent
  const handleDiagnosisGenerated = (diagnosisData) => {
    setDiagnosis(diagnosisData);
  };

  // Handle appointment request
  const handleAppointmentRequested = (appointmentData) => {
    setAppointmentRequested(true);
    // In a real implementation, this would trigger the appointment scheduling flow
  };

  // Start recording
  const startRecording = () => {
    setRecording(true);
    setResponse('Listening...');
  };

  // Stop recording
  const stopRecording = () => {
    setRecording(false);
  };

  // Send text input (for non-voice interaction)
  const sendTextInput = (text) => {
    if (voiceInterfaceRef.current && voiceInterfaceRef.current.sendTextMessage) {
      voiceInterfaceRef.current.sendTextMessage(text);
    } else {
      // Fallback if voice interface isn't ready
      setTranscript(text);
    }
  };

  // Schedule appointment (placeholder)
  const scheduleAppointment = () => {
    Alert.alert(
      'Schedule Appointment',
      'In a complete implementation, this would connect to your healthcare provider\'s scheduling system to book an appointment.',
      [{ text: 'OK', onPress: () => console.log('OK Pressed') }]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="auto" />
      
      <View style={styles.header}>
        <Text style={styles.headerText}>Healthcare Voice Assistant</Text>
        {connectionState === 'connecting' && (
          <ActivityIndicator size="small" color="white" />
        )}
      </View>
      
      {!connected ? (
        <View style={styles.connectContainer}>
          <TouchableOpacity 
            style={styles.connectButton}
            onPress={connectToLiveKit}
          >
            <Text style={styles.connectButtonText}>Connect to Voice Assistant</Text>
          </TouchableOpacity>
          {connectionState === 'connecting' && (
            <Text style={styles.connectingText}>Connecting...</Text>
          )}
          {connectionState === 'error' && (
            <Text style={styles.errorText}>Connection failed. Please try again.</Text>
          )}
        </View>
      ) : (
        <>
          <ScrollView style={styles.conversationContainer}>
            {transcript ? (
              <View style={styles.messageContainer}>
                <Text style={styles.messageLabel}>You said:</Text>
                <Text style={styles.messageText}>{transcript}</Text>
              </View>
            ) : null}
            
            {response ? (
              <View style={styles.responseContainer}>
                <Text style={styles.messageLabel}>Assistant:</Text>
                <Text style={styles.messageText}>{response}</Text>
              </View>
            ) : null}
            
            {diagnosis && (
              <View style={styles.diagnosisContainer}>
                <Text style={styles.diagnosisTitle}>Possible Diagnosis:</Text>
                {diagnosis.possibleConditions.map((condition, index) => (
                  <Text key={index} style={styles.diagnosisText}>• {condition}</Text>
                ))}
                <Text style={styles.diagnosisTitle}>Recommendations:</Text>
                {diagnosis.recommendations.map((recommendation, index) => (
                  <Text key={index} style={styles.diagnosisText}>• {recommendation}</Text>
                ))}
              </View>
            )}
            
            {appointmentRequested && (
              <View style={styles.appointmentContainer}>
                <Text style={styles.appointmentTitle}>Appointment Request</Text>
                <TouchableOpacity 
                  style={styles.appointmentButton}
                  onPress={scheduleAppointment}
                >
                  <Text style={styles.appointmentButtonText}>Schedule Appointment</Text>
                </TouchableOpacity>
              </View>
            )}
          </ScrollView>
          
          <View style={styles.controlsContainer}>
            <TouchableOpacity 
              style={[styles.recordButton, recording && styles.recordingButton]}
              onPressIn={startRecording}
              onPressOut={stopRecording}
            >
              <Text style={styles.recordButtonText}>
                {recording ? 'Release to Stop' : 'Press to Speak'}
              </Text>
            </TouchableOpacity>
          </View>
        </>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#4a90e2',
    padding: 20,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  headerText: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
    marginRight: 10,
  },
  connectContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  connectButton: {
    backgroundColor: '#4a90e2',
    padding: 15,
    borderRadius: 10,
    width: '80%',
    alignItems: 'center',
  },
  connectButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  connectingText: {
    marginTop: 20,
    color: '#666',
  },
  errorText: {
    marginTop: 20,
    color: 'red',
  },
  conversationContainer: {
    flex: 1,
    padding: 15,
  },
  messageContainer: {
    backgroundColor: 'white',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  responseContainer: {
    backgroundColor: '#e3f2fd',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: '#bbdefb',
  },
  messageLabel: {
    fontWeight: 'bold',
    marginBottom: 5,
    fontSize: 14,
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
  },
  diagnosisContainer: {
    backgroundColor: '#f1f8e9',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: '#c5e1a5',
  },
  diagnosisTitle: {
    fontWeight: 'bold',
    fontSize: 16,
    marginTop: 10,
    marginBottom: 5,
  },
  diagnosisText: {
    fontSize: 14,
    lineHeight: 20,
    marginLeft: 10,
  },
  appointmentContainer: {
    backgroundColor: '#fff9c4',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: '#fff59d',
    alignItems: 'center',
  },
  appointmentTitle: {
    fontWeight: 'bold',
    fontSize: 16,
    marginBottom: 10,
  },
  appointmentButton: {
    backgroundColor: '#ffa000',
    padding: 10,
    borderRadius: 5,
    width: '80%',
    alignItems: 'center',
  },
  appointmentButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
  controlsContainer: {
    padding: 20,
    alignItems: 'center',
  },
  recordButton: {
    backgroundColor: '#4caf50',
    width: 150,
    height: 150,
    borderRadius: 75,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 5,
  },
  recordingButton: {
    backgroundColor: '#f44336',
  },
  recordButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
